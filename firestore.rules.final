'''rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Deny all access by default
    match /{document=**} {
      allow read, write: if false;
    }

    //----------------------------------------------------------------------
    // Users Collection
    //
    // - Each user has a profile document in `/users/{userId}`.
    // - Users can only read and write their own profile.
    // - The `roles` field is protected and can only be changed by an admin.
    //----------------------------------------------------------------------
    match /users/{userId} {
      // Users can read their own profile
      allow read: if request.auth.uid == userId;

      // Users can create their own profile
      allow create: if request.auth.uid == userId;

      // Users can update their own profile, but not their roles
      allow update: if request.auth.uid == userId && !('roles' in request.resource.data);
    }

    //----------------------------------------------------------------------
    // Scrolls Collection (for Qoder agents)
    //
    // - Scrolls are read-only for authenticated users.
    // - Only admins can create, update, or delete scrolls.
    //----------------------------------------------------------------------
    match /scrolls/{scrollId} {
      allow read: if request.auth != null;
      allow write: if request.auth.token.roles.hasAny(['admin']);
    }

    //----------------------------------------------------------------------
    // Clinic-Specific Data
    //
    // - All data is organized under a clinic ID: `/clinics/{clinicId}`.
    // - User roles are checked against the `/users/{userId}` document.
    //----------------------------------------------------------------------
    match /clinics/{clinicId}/{collection}/{docId} {
      allow read, write: if hasClinicRole(clinicId, ['admin', 'clinician']);
    }

    // Helper function to check user roles for a specific clinic
    function hasClinicRole(clinicId, allowedRoles) {
      let userRoles = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles;
      return request.auth.uid != null &&
             userRoles[clinicId] in allowedRoles;
    }

    //----------------------------------------------------------------------
    // Example: Patients Collection (within a clinic)
    //
    // - Requires 'clinician' or 'admin' role for the given clinicId.
    //----------------------------------------------------------------------
    match /clinics/{clinicId}/patients/{patientId} {
      allow read, write: if hasClinicRole(clinicId, ['admin', 'clinician']);
    }
  }
}
''